// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC {
    public static HopeLingerieSite.Controllers.AccountController Account = new HopeLingerieSite.Controllers.T4MVC_AccountController();
    public static HopeLingerieSite.Controllers.Backoffice.BackOfficeController BackOffice = new HopeLingerieSite.Controllers.Backoffice.T4MVC_BackOfficeController();
    public static HopeLingerieSite.Controllers.CatalogoController Catalogo = new HopeLingerieSite.Controllers.T4MVC_CatalogoController();
    public static HopeLingerieSite.Controllers.FranquiciasController Franquicias = new HopeLingerieSite.Controllers.T4MVC_FranquiciasController();
    public static HopeLingerieSite.Controllers.HomeController Home = new HopeLingerieSite.Controllers.T4MVC_HomeController();
    public static HopeLingerieSite.Controllers.QuienesSomosController QuienesSomos = new HopeLingerieSite.Controllers.T4MVC_QuienesSomosController();
    public static HopeLingerieSite.Controllers.ContactoController Contacto = new HopeLingerieSite.Controllers.T4MVC_ContactoController();
    public static HopeLingerieSite.Controllers.SucursalesController Sucursales = new HopeLingerieSite.Controllers.T4MVC_SucursalesController();
    public static HopeLingerieAdmin.Controllers.Landing.LandingController Landing = new HopeLingerieAdmin.Controllers.Landing.T4MVC_LandingController();
    public static HopeLingerieSite.Controllers.ShopingCart.ShoppingCartController ShoppingCart = new HopeLingerieSite.Controllers.ShopingCart.T4MVC_ShoppingCartController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC {
}

   
namespace System.Web.Mvc {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class T4Extensions {
        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary());
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes, string protocol = null, string hostName = null, string fragment = null) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes), protocol, hostName, fragment);
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes, string protocol = null, string hostName = null, string fragment = null) {
            return htmlHelper.RouteLink(linkText, null, protocol, hostName, fragment, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result) {
            return htmlHelper.BeginForm(result, FormMethod.Post);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, formMethod, htmlAttributes);
        }

        public static void RenderAction(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            htmlHelper.RenderAction(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }

        public static MvcHtmlString Action(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.Action(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }
        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.RouteUrl(null, result.GetRouteValueDictionary());
        }

        public static string Action(this UrlHelper urlHelper, ActionResult result, string protocol = null, string hostName = null) {
            return urlHelper.RouteUrl(null, result.GetRouteValueDictionary(), protocol, hostName);
        }

        public static string ActionAbsolute(this UrlHelper urlHelper, ActionResult result) {
            return string.Format("{0}{1}",urlHelper.RequestContext.HttpContext.Request.Url.GetLeftPart(UriPartial.Authority),
                urlHelper.RouteUrl(result.GetRouteValueDictionary()));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.BeginForm(result, ajaxOptions, null);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return BeginForm(ajaxHelper, result, ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return ajaxHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return MapRoute(routes, name, url, result, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, string[] namespaces) {
            return MapRoute(routes, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRoute(routes, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            routes.Add(name, route);
            return route;
        }

        // Note: can't name the AreaRegistrationContext methods 'MapRoute', as that conflicts with the existing methods
        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result) {
            return MapRouteArea(context, name, url, result, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, string[] namespaces) {
            return MapRouteArea(context, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRouteArea(context, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            if ((namespaces == null) && (context.Namespaces != null)) {
                 namespaces = context.Namespaces.ToArray();
            }
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            context.Routes.Add(name, route);
            route.DataTokens["area"] = context.AreaName;
            bool useNamespaceFallback = (namespaces == null) || (namespaces.Length == 0);
            route.DataTokens["UseNamespaceFallback"] = useNamespaceFallback;
            return route;
        }

        private static Route CreateRoute(string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            var routeConstraints = new RouteValueDictionary(constraints);

            // Create and add the route
            var route = new Route(url, routeValues, routeConstraints, new MvcRouteHandler());

            route.DataTokens = new RouteValueDictionary();

            if (namespaces != null && namespaces.Length > 0) {
                route.DataTokens["Namespaces"] = namespaces;
            }

            return route;
        }

        public static IT4MVCActionResult GetT4MVCResult(this ActionResult result) {
            var t4MVCResult = result as IT4MVCActionResult;
            if (t4MVCResult == null) {
                throw new InvalidOperationException("T4MVC was called incorrectly. You may need to force it to regenerate by right clicking on T4MVC.tt and choosing Run Custom Tool");
            }
            return t4MVCResult;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return result.GetT4MVCResult().RouteValueDictionary;
        }

        public static ActionResult AddRouteValues(this ActionResult result, object routeValues) {
            return result.AddRouteValues(new RouteValueDictionary(routeValues));
        }

        public static ActionResult AddRouteValues(this ActionResult result, RouteValueDictionary routeValues) {
            RouteValueDictionary currentRouteValues = result.GetRouteValueDictionary();

            // Add all the extra values
            foreach (var pair in routeValues) {
                currentRouteValues.Add(pair.Key, pair.Value);
            }

            return result;
        }

        public static ActionResult AddRouteValues(this ActionResult result, System.Collections.Specialized.NameValueCollection nameValueCollection) {
            // Copy all the values from the NameValueCollection into the route dictionary
            nameValueCollection.CopyTo(result.GetRouteValueDictionary());
            return result;
        }

        public static ActionResult AddRouteValue(this ActionResult result, string name, object value) {
            RouteValueDictionary routeValues = result.GetRouteValueDictionary();
            routeValues.Add(name, value);
            return result;
        }
        
        public static void InitMVCT4Result(this IT4MVCActionResult result, string area, string controller, string action) {
            result.Controller = controller;
            result.Action = action;
            result.RouteValueDictionary = new RouteValueDictionary();
            result.RouteValueDictionary.Add("Area", area ?? ""); 
            result.RouteValueDictionary.Add("Controller", controller);
            result.RouteValueDictionary.Add("Action", action);
        }

        public static bool FileExists(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return false;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return System.IO.File.Exists(filePath);
        }

        static DateTime CenturyBegin=new DateTime(2001,1,1);
        public static string TimestampString(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return string.Empty;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return Convert.ToString((System.IO.File.GetLastWriteTimeUtc(filePath).Ticks-CenturyBegin.Ticks)/1000000000,16);            
        }
    }
}



namespace T4MVC {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}


  

   
[GeneratedCode("T4MVC", "2.0")]   
public interface IT4MVCActionResult {   
    string Action { get; set; }   
    string Controller { get; set; }   
    RouteValueDictionary RouteValueDictionary { get; set; }   
}   
  

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string cadastro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cadastro.min.js") ? Url("cadastro.min.js") : Url("cadastro.js");
                      
        public static readonly string dhtml_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dhtml.min.js") ? Url("dhtml.min.js") : Url("dhtml.js");
                      
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class fancybox {
            private const string URLPATH = "~/Scripts/fancybox";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string blank_gif = Url("blank.gif");
            public static readonly string fancy_close_png = Url("fancy_close.png");
            public static readonly string fancy_loading_png = Url("fancy_loading.png");
            public static readonly string fancy_nav_left_png = Url("fancy_nav_left.png");
            public static readonly string fancy_nav_right_png = Url("fancy_nav_right.png");
            public static readonly string fancy_shadow_e_png = Url("fancy_shadow_e.png");
            public static readonly string fancy_shadow_n_png = Url("fancy_shadow_n.png");
            public static readonly string fancy_shadow_ne_png = Url("fancy_shadow_ne.png");
            public static readonly string fancy_shadow_nw_png = Url("fancy_shadow_nw.png");
            public static readonly string fancy_shadow_s_png = Url("fancy_shadow_s.png");
            public static readonly string fancy_shadow_se_png = Url("fancy_shadow_se.png");
            public static readonly string fancy_shadow_sw_png = Url("fancy_shadow_sw.png");
            public static readonly string fancy_shadow_w_png = Url("fancy_shadow_w.png");
            public static readonly string fancy_title_left_png = Url("fancy_title_left.png");
            public static readonly string fancy_title_main_png = Url("fancy_title_main.png");
            public static readonly string fancy_title_over_png = Url("fancy_title_over.png");
            public static readonly string fancy_title_right_png = Url("fancy_title_right.png");
            public static readonly string fancybox_x_png = Url("fancybox-x.png");
            public static readonly string fancybox_y_png = Url("fancybox-y.png");
            public static readonly string fancybox_png = Url("fancybox.png");
            public static readonly string jquery_easing_1_3_pack_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.easing-1.3.pack.min.js") ? Url("jquery.easing-1.3.pack.min.js") : Url("jquery.easing-1.3.pack.js");
                          
            public static readonly string jquery_fancybox_1_3_1_css = Url("jquery.fancybox-1.3.1.css");
            public static readonly string jquery_fancybox_1_3_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fancybox-1.3.1.min.js") ? Url("jquery.fancybox-1.3.1.min.js") : Url("jquery.fancybox-1.3.1.js");
                          
            public static readonly string jquery_fancybox_1_3_1_pack_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fancybox-1.3.1.pack.min.js") ? Url("jquery.fancybox-1.3.1.pack.min.js") : Url("jquery.fancybox-1.3.1.pack.js");
                          
            public static readonly string jquery_fancybox_1_3_4_css = Url("jquery.fancybox-1.3.4.css");
            public static readonly string jquery_fancybox_1_3_4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fancybox-1.3.4.min.js") ? Url("jquery.fancybox-1.3.4.min.js") : Url("jquery.fancybox-1.3.4.js");
                          
            public static readonly string jquery_fancybox_1_3_4_pack_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.fancybox-1.3.4.pack.min.js") ? Url("jquery.fancybox-1.3.4.pack.min.js") : Url("jquery.fancybox-1.3.4.pack.js");
                          
            public static readonly string jquery_mousewheel_3_0_2_pack_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.mousewheel-3.0.2.pack.min.js") ? Url("jquery.mousewheel-3.0.2.pack.min.js") : Url("jquery.mousewheel-3.0.2.pack.js");
                          
            public static readonly string jquery_mousewheel_3_0_4_pack_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.mousewheel-3.0.4.pack.min.js") ? Url("jquery.mousewheel-3.0.4.pack.min.js") : Url("jquery.mousewheel-3.0.4.pack.js");
                          
        }
    
        public static readonly string funcoes_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/funcoes.min.js") ? Url("funcoes.min.js") : Url("funcoes.js");
                      
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class i18n {
            private const string URLPATH = "~/Scripts/i18n";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_formatCurrency_en_US_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.formatCurrency.en-US.min.js") ? Url("jquery.formatCurrency.en-US.min.js") : Url("jquery.formatCurrency.en-US.js");
                          
            public static readonly string jquery_formatCurrency_es_AR_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.formatCurrency.es-AR.min.js") ? Url("jquery.formatCurrency.es-AR.min.js") : Url("jquery.formatCurrency.es-AR.js");
                          
        }
    
        public static readonly string jquery_1_4_4_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.4.4-vsdoc.min.js") ? Url("jquery-1.4.4-vsdoc.min.js") : Url("jquery-1.4.4-vsdoc.js");
                      
        public static readonly string jquery_1_4_4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.4.4.min.js") ? Url("jquery-1.4.4.min.js") : Url("jquery-1.4.4.js");
                      
        public static readonly string jquery_1_4_4_min_js = Url("jquery-1.4.4.min.js");
        public static readonly string jquery_ui_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui.min.js") ? Url("jquery-ui.min.js") : Url("jquery-ui.js");
                      
        public static readonly string jquery_ui_min_js = Url("jquery-ui.min.js");
        public static readonly string jquery_cascadingDropDown_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.cascadingDropDown.min.js") ? Url("jquery.cascadingDropDown.min.js") : Url("jquery.cascadingDropDown.js");
                      
        public static readonly string jquery_formatCurrency_1_4_0_min_js = Url("jquery.formatCurrency-1.4.0.min.js");
        public static readonly string jquery_twitter_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.twitter.min.js") ? Url("jquery.twitter.min.js") : Url("jquery.twitter.js");
                      
        public static readonly string jquery_unobtrusive_ajax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.unobtrusive-ajax.min.js") ? Url("jquery.unobtrusive-ajax.min.js") : Url("jquery.unobtrusive-ajax.js");
                      
        public static readonly string jquery_unobtrusive_ajax_min_js = Url("jquery.unobtrusive-ajax.min.js");
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
                      
        public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
                      
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
                      
        public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        public static readonly string jqueryJcarousel_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jqueryJcarousel.min.js") ? Url("jqueryJcarousel.min.js") : Url("jqueryJcarousel.js");
                      
        public static readonly string jqueryScripts_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jqueryScripts.min.js") ? Url("jqueryScripts.min.js") : Url("jqueryScripts.js");
                      
        public static readonly string magiczoom_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/magiczoom.min.js") ? Url("magiczoom.min.js") : Url("magiczoom.js");
                      
        public static readonly string MicrosoftAjax_debug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftAjax.debug.min.js") ? Url("MicrosoftAjax.debug.min.js") : Url("MicrosoftAjax.debug.js");
                      
        public static readonly string MicrosoftAjax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftAjax.min.js") ? Url("MicrosoftAjax.min.js") : Url("MicrosoftAjax.js");
                      
        public static readonly string MicrosoftMvcAjax_debug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftMvcAjax.debug.min.js") ? Url("MicrosoftMvcAjax.debug.min.js") : Url("MicrosoftMvcAjax.debug.js");
                      
        public static readonly string MicrosoftMvcAjax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftMvcAjax.min.js") ? Url("MicrosoftMvcAjax.min.js") : Url("MicrosoftMvcAjax.js");
                      
        public static readonly string MicrosoftMvcValidation_debug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftMvcValidation.debug.min.js") ? Url("MicrosoftMvcValidation.debug.min.js") : Url("MicrosoftMvcValidation.debug.js");
                      
        public static readonly string MicrosoftMvcValidation_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftMvcValidation.min.js") ? Url("MicrosoftMvcValidation.min.js") : Url("MicrosoftMvcValidation.js");
                      
        public static readonly string minified_main_jsflash_jsfunctions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/minified-main.min.jsflash.min.jsfunctions.min.js") ? Url("minified-main.min.jsflash.min.jsfunctions.min.js") : Url("minified-main.jsflash.jsfunctions.js");
                      
        public static readonly string welcome_hope_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/welcome_hope.min.js") ? Url("welcome_hope.min.js") : Url("welcome_hope.js");
                      
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class imgs {
            private const string URLPATH = "~/Content/imgs";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class backoffice {
                private const string URLPATH = "~/Content/imgs/backoffice";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string add_gif = Url("add.gif");
                public static readonly string AddItem_png = Url("AddItem.png");
                public static readonly string Att_gif = Url("Att.gif");
                public static readonly string back_png = Url("back.png");
                public static readonly string delete_gif = Url("delete.gif");
                public static readonly string edit_png = Url("edit.png");
                public static readonly string price_gif = Url("price.gif");
                public static readonly string print_gif = Url("print.gif");
                public static readonly string save_gif = Url("save.gif");
                public static readonly string View_png = Url("View.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class banners {
                private const string URLPATH = "~/Content/imgs/banners";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string Bras_jpg = Url("Bras.jpg");
                public static readonly string foto_jpg = Url("foto.jpg");
                public static readonly string Logo_gif = Url("Logo.gif");
                public static readonly string Lounge_jpg = Url("Lounge.jpg");
                public static readonly string News_jpg = Url("News.jpg");
                public static readonly string Outlet_jpg = Url("Outlet.jpg");
                public static readonly string Panties_jpg = Url("Panties.jpg");
                public static readonly string Sale_jpg = Url("Sale.jpg");
                public static readonly string Sutiens_jpg = Url("Sutiens.jpg");
                public static readonly string Swim_jpg = Url("Swim.jpg");
            }
        
            public static readonly string bg_cadeado_png = Url("bg-cadeado.png");
            public static readonly string bg_welcome_jpg = Url("bg-welcome.jpg");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class catalogue {
                private const string URLPATH = "~/Content/imgs/catalogue";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string nodisponible_gif = Url("nodisponible.gif");
            }
        
            public static readonly string descubra_medidas_conforto_png = Url("descubra-medidas-conforto.png");
            public static readonly string ecomercial_png = Url("ecomercial.png");
            public static readonly string favicon_gif = Url("favicon.gif");
            public static readonly string h1_hope_png = Url("h1-hope.png");
            public static readonly string h2_cacinhas_png = Url("h2-cacinhas.png");
            public static readonly string h2_cadastrese_png = Url("h2-cadastrese.png");
            public static readonly string h2_cintas_png = Url("h2-cintas.png");
            public static readonly string h2_extras_png = Url("h2-extras.png");
            public static readonly string h2_inspiracao_png = Url("h2-inspiracao.png");
            public static readonly string h2_lancamentos_png = Url("h2-lancamentos.png");
            public static readonly string h2_sutias_png = Url("h2-sutias.png");
            public static readonly string h3_blog_hope_png = Url("h3-blog-hope.png");
            public static readonly string h3_loucos_lingerie_png = Url("h3-loucos-lingerie.png");
            public static readonly string h3_nossaslojas_png = Url("h3-nossaslojas.png");
            public static readonly string h3_sobre_hope_png = Url("h3-sobre-hope.png");
            public static readonly string h3_twitter_hope_png = Url("h3-twitter-hope.png");
            public static readonly string h3_veja_video_png = Url("h3-veja-video.png");
            public static readonly string menu_apoio_png = Url("menu-apoio.png");
            public static readonly string separador_png = Url("separador.png");
            public static readonly string transparent_gif = Url("transparent.gif");
            public static readonly string txt_sobre_hope_png = Url("txt-sobre-hope.png");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class styles {
            private const string URLPATH = "~/Content/styles";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string Account_css = Url("Account.css");
            public static readonly string Information_css = Url("Information.css");
            public static readonly string main1_css_jqueryFancybox_css_jqueryJcarousel_css_skin_css = Url("main1.css-jqueryFancybox.css-jqueryJcarousel.css-skin.css");
            public static readonly string Password_css = Url("Password.css");
            public static readonly string produto_css_MagicZoom_css_jqueryfancybox_css = Url("produto.css-MagicZoom.css-jqueryfancybox.css");
            public static readonly string ShoppingCartStep1_css = Url("ShoppingCartStep1.css");
            public static readonly string ShoppingCartStep3_css = Url("ShoppingCartStep3.css");
            public static readonly string ShoppingCartStep4_css = Url("ShoppingCartStep4.css");
            public static readonly string SiteMini_css = Url("SiteMini.css");
            public static readonly string welcome_hope_css = Url("welcome_hope.css");
        }
    
    }

}

static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;


    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591


